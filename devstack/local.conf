# Sample ``local.conf`` for user-configurable variables in ``stack.sh``

# NOTE: Copy this file to the root DevStack directory for it to work properly.

# ``local.conf`` is a user-maintained settings file that is sourced from ``stackrc``.
# This gives it the ability to override any variables set in ``stackrc``.
# Also, most of the settings in ``stack.sh`` are written to only be set if no
# value has already been set; this lets ``local.conf`` effectively override the
# default values.

# This is a collection of some of the settings we have found to be useful
# in our DevStack development environments. Additional settings are described
# in https://docs.openstack.org/devstack/latest/configuration.html#local-conf
# These should be considered as samples and are unsupported DevStack code.

# The ``localrc`` section replaces the old ``localrc`` configuration file.
# Note that if ``localrc`` is present it will be used in favor of this section.
[[local|localrc]]

# Pip
PIP_USE_MIRRORS=False
USE_GET_PIP=1
PIP_UPGRADE=True

# OFFLINE=True
RECLONE=no

# Python
#USE_PYTHON3=True
# Minimal Contents
# ----------------

# While ``stack.sh`` is happy to run without ``localrc``, devlife is better when
# there are a few minimal variables set:

# If the ``*_PASSWORD`` variables are not set here you will be prompted to enter
# values for them by ``stack.sh``and they will be added to ``local.conf``.
ADMIN_PASSWORD=devstack
DATABASE_PASSWORD=$ADMIN_PASSWORD
RABBIT_PASSWORD=$ADMIN_PASSWORD
SERVICE_PASSWORD=$ADMIN_PASSWORD

MYSQL_PASSWORD=$ADMIN_PASSWORD
SERVICE_TOKEN=supersecrettoken


# Logging
# -------

# By default ``stack.sh`` output only goes to the terminal where it runs.  It can
# be configured to additionally log to a file by setting ``LOGFILE`` to the full
# path of the destination log file.  A timestamp will be appended to the given name.
LOGFILE=$DEST/logs/stack.sh.log

# Old log files are automatically removed after 7 days to keep things neat.  Change
# the number of days by setting ``LOGDAYS``.
LOGDAYS=2

# Nova logs will be colorized if ``SYSLOG`` is not set; turn this off by setting
# ``LOG_COLOR`` false.
#LOG_COLOR=False


# Using milestone-proposed branches
# ---------------------------------

# Uncomment these to grab the milestone-proposed branches from the
# repos:
#CINDER_BRANCH=milestone-proposed
#GLANCE_BRANCH=milestone-proposed
#HORIZON_BRANCH=milestone-proposed
#KEYSTONE_BRANCH=milestone-proposed
#KEYSTONECLIENT_BRANCH=milestone-proposed
#NOVA_BRANCH=milestone-proposed
#NOVACLIENT_BRANCH=milestone-proposed
#NEUTRON_BRANCH=milestone-proposed
#SWIFT_BRANCH=milestone-proposed

# Using git versions of clients
# -----------------------------
# By default clients are installed from pip.  See LIBS_FROM_GIT in
# stackrc for details on getting clients from specific branches or
# revisions.  e.g.
# LIBS_FROM_GIT="python-ironicclient"
# IRONICCLIENT_BRANCH=refs/changes/44/2.../1

# Swift
# -----

# Swift is now used as the back-end for the S3-like object store. Setting the
# hash value is required and you will be prompted for it if Swift is enabled
# so just set it to something already:
SWIFT_HASH=66a3d6b56c1f479c8b4e70ab5c2000f5

# For development purposes the default of 3 replicas is usually not required.
# Set this to 1 to save some resources:
SWIFT_REPLICAS=1

# The data for Swift is stored by default in (``$DEST/data/swift``),
# or (``$DATA_DIR/swift``) if ``DATA_DIR`` has been set, and can be
# moved by setting ``SWIFT_DATA_DIR``. The directory will be created
# if it does not exist.
SWIFT_DATA_DIR=$DEST/data


enable_plugin networking-odl http://git.openstack.org/openstack/networking-odl stable/rocky

# This will fetch the latest ODL snapshot
#ODL_RELEASE=latest-snapshot
ODL_RELEASE=oxygen-latest
# Default is psuedo-port-binding-controller
#ODL_PORT_BINDING_CONTROLLER=


# Set here which ODL openstack service provider to use
# These are core ODL features
ODL_NETVIRT_KARAF_FEATURE=odl-neutron-service,odl-restconf-all,odl-aaa-authn,odl-dlux-core,odl-mdsal-apidocs

#FOR THE NEW NETVIRT
# ODL_NETVIRT_KARAF_FEATURE=odl-restconf-all,odl-aaa-authn,odl-dlux-core,odl-mdsal-apidocs,odl-netvirt-vpnservice-openstack
#ODL_BOOT_WAIT_URL=restconf/operational/network-topology:network-topology/ # Workaround since netvirt:1 no longer exists in DS!

# Set DLUX Karaf features needed for the ODL GUI at http://<ODL_IP>:8181/index.html
ODL_NETVIRT_KARAF_FEATURE+=,odl-dluxapps-nodes,odl-dluxapps-topology,odl-dluxapps-yangui,odl-dluxapps-yangvisualizer

# Set L2 Karaf features needed for the ODL GUI at http://<ODL_IP>:8181/index.html
ODL_NETVIRT_KARAF_FEATURE+=,odl-l2switch-switch,odl-l2switch-switch-ui,odl-ovsdb-hwvtepsouthbound-ui,odl-ovsdb-southbound-impl-ui,odl-netvirt-ui

# Set OpenFlow Karaf features needed for the ODL GUI at http://<ODL_IP>:8181/index.html
ODL_NETVIRT_KARAF_FEATURE+=,odl-openflowplugin-flow-services-ui

# odl-netvirt-openstack is used for new netvirt
ODL_NETVIRT_KARAF_FEATURE+=,odl-netvirt-openstack

# optional feature neutron-logger to log changes of neutron yang models
ODL_NETVIRT_KARAF_FEATURE+=,odl-neutron-logger

# Switch to using the ODL's L3 implementation
ODL_L3=True


# ``HOST_IP`` and ``HOST_IPV6`` should be set manually for best results if
# the NIC configuration of the host is unusual, i.e. ``eth1`` has the default
# route but ``eth0`` is the public interface.  They are auto-detected in
# ``stack.sh`` but often is indeterminate on later runs due to the IP moving
# from an Ethernet interface to a bridge on the host. Setting it here also
# makes it available for ``openrc`` to include when setting ``OS_AUTH_URL``.
# Neither is set by default.

#HOST_IPV6=2001:db8::7

# HOST_IP=192.168.80.129
HOST_IP=192.168.184.129
SERVICE_HOST=192.168.184.129

# External Network and more
HOST_IP_IFACE=ens38
PUBLIC_INTERFACE=ens33

# Management Network
FLAT_INTERFACE=ens38 


# private network connectivity
FIXED_RANGE=10.1.0.0/20
FIXED_NETWORK_SIZE=4096

# public network connectivity, realiza la conexion mediante un puerto con la public_interface
FLOATING_RANGE=172.24.5.0/24
PUBLIC_NETWORK_NAME=external
PUBLIC_NETWORK_GATEWAY=172.24.5.1

# PHYSICAL_NETWORK=default


Q_USE_PROVIDERNET_FOR_PUBLIC=True

Q_USE_PUBLIC_VETH=True
Q_PUBLIC_VETH_EX=veth-pub-ex
Q_PUBLIC_VETH_INT=veth-pub-int
PUBLIC_PHYSICAL_NETWORK=public
ODL_PROVIDER_MAPPINGS=public:${Q_PUBLIC_VETH_INT}
# OFAGENT_PHYSICAL_INTERFACE_MAPPINGS=public:${Q_PUBLIC_VETH_INT}

# Q_USE_PUBLIC_VETH=False
# PUBLIC_PHYSICAL_NETWORK=public
# OVS_BRIDGE_MAPPINGS=public:br-ex
# ODL_PROVIDER_MAPPINGS=${ODL_PROVIDER_MAPPINGS:-br-ex:ens33} # (ovsdb based)
# ODL_PROVIDER_MAPPINGS=${ODL_PROVIDER_MAPPINGS:-physnet1:ens33} # for new netvirt (vpnservice based)


# Enable debug logs for odl ovsdb
#ODL_NETVIRT_DEBUG_LOGS=True
#Q_USE_DEBUG_COMMAND=True

DEST=/opt/stack
# move DATA_DIR outside of DEST to keep DEST a bit cleaner
DATA_DIR=/opt/stack/data

# Por si falla el devstack@etcd.service
#disable_service etcd3

enable_service dstat
enable_service g-api
enable_service g-reg
enable_service key
enable_service mysql
enable_service n-api
enable_service n-cond
enable_service n-cpu
enable_service n-crt
enable_service n-novnc
enable_service n-sch
enable_service placement-api
enable_service placement-client
enable_service neutron-dhcp
enable_service neutron-metadata-agent
enable_service neutron-api
enable_service rabbit
#enable_service tempest

# These can be enabled if storage is needed to do
# any feature or testing for integration
disable_service c-api
disable_service c-vol
disable_service c-sch

SKIP_EXERCISES=boot_from_volume,bundle,client-env,euca

# Screen console logs will capture service logs.
SYSLOG=False
LOGFILE=/opt/stack/new/devstacklog.txt
VERBOSE=True
ENABLE_DEBUG_LOG_LEVEL=True
ENABLE_VERBOSE_LOG_LEVEL=True
VIRT_DRIVER=libvirt

export OS_NO_CACHE=1

# Additional repositories need to be cloned can be added here.
#LIBS_FROM_GIT=

# Enable MySql Logging
DATABASE_QUERY_LOGGING=True

# set this until all testing platforms have libvirt >= 1.2.11
# see bug #1501558
EBTABLES_RACE_FIX=True

## FIX ERROR WHEN CREATE NETWORKS
NEUTRON_CREATE_INITIAL_NETWORKS=False

## FOR SERVICE FUNCTION CHAINING
#enable_plugin networking-ovs-dpdk http://git.openstack.org/openstack/networking-ovs-dpdk stable/rocky
SKIP_OVS_INSTALL=True
# enable the networking-sfc plugin:
enable_plugin networking-sfc https://github.com/openstack/networking-sfc.git stable/rocky

# enable the odl-netvirt-sfc Karaf feature in OpenDaylight
ODL_NETVIRT_KARAF_FEATURE+=,odl-netvirt-sfc


### TACKER

Q_PLUGIN=ml2
Q_AGENT=openvswitch


# Disable security groups
Q_USE_SECGROUP=False
LIBVIRT_FIREWALL_DRIVER=nova.virt.firewall.NoopFirewallDriver

# Enable heat, networking-sfc, barbican and mistral
enable_plugin heat https://git.openstack.org/openstack/heat stable/rocky
enable_plugin barbican https://git.openstack.org/openstack/barbican stable/rocky
enable_plugin mistral https://git.openstack.org/openstack/mistral stable/rocky

# Ceilometer
#CEILOMETER_PIPELINE_INTERVAL=300
enable_plugin ceilometer https://git.openstack.org/openstack/ceilometer stable/rocky
enable_plugin aodh https://git.openstack.org/openstack/aodh stable/rocky

# Tacker
enable_plugin tacker https://git.openstack.org/openstack/tacker stable/rocky

enable_service n-novnc
enable_service n-cauth

disable_service tempest

# Enable Kubernetes and kuryr-kubernetes
KUBERNETES_VIM=False
#enable_plugin kuryr-kubernetes https://git.openstack.org/openstack/kuryr-kubernetes stable/rocky

enable_service q-lbaasv2
NEUTRON_LBAAS_SERVICE_PROVIDERV2="LOADBALANCERV2:opendaylight:networking_odl.lbaas.lbaasv2_driver_v2.OpenDaylightLbaasDriverV2:default"
enable_plugin neutron-lbaas https://git.openstack.org/openstack/neutron-lbaas stable/rocky

#enable_plugin devstack-plugin-container https://git.openstack.org/openstack/devstack-plugin-container stable/rocky

#enable_plugin networking-l2gw http://opendev.org/openstack/networking-l2gw
#enable_service l2gw-plugin
#NETWORKING_L2GW_SERVICE_DRIVER=L2GW:OpenDaylight:networking_odl.l2gateway.driver_v2.OpenDaylightL2gwDriver:default

#enable_plugin networking-bgpvpn https://opendev.org/openstack/networking-bgpvpn.git
#[[post-config|$NETWORKING_BGPVPN_CONF]]
#[service_providers]
#service_provider=BGPVPN:OpenDaylight:networking_odl.bgpvpn.odl_v2.OpenDaylightBgpvpnDriver:default

# Tacker tiene un bug que hay que definir este fichero porque no lo hace en el propio plugin
# Q_PLUGIN_CONF_FILE=opt/stack/networking-odl/etc/neutron/plugins/ml2/ml2_conf_odl.ini
Q_PLUGIN_CONF_FILE=etc/neutron/plugins/ml2/ml2_conf.ini
# NEUTRON_CONF=/opt/stack/networking-odl/etc/neutron

[[post-config|/etc/neutron/dhcp_agent.ini]]
[DEFAULT]
enable_isolated_metadata = True

# enable the networking-sfc OpenDaylight driver pair
[[post-config|$NEUTRON_CONF]]
[sfc]
drivers = odl_v2
[flowclassifier]
drivers = odl_v2


